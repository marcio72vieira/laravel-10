# Para executar a aplicação:
  a) docker-compose up -d (Levanta todos os containers/serviços localizados dentro do arquivo: docker-compose.yml)
# Para executar o bash (pasta /var/www):
  a) docker exec -it laravel-10_app_1 bash
  a) docker-compose exec app bash
# Para sair do bash (pasta /var/www):
  a) exit
# Para ver os containers em execução: docker ps
# Para parar um container em execução: docker stop nome_do_contaier (se possuir) OU docker stop id_do_container
# Para executar um comando do artisan: Dentro do bash, executar o comando desejado: php artisan migrate OU php artisan make:controller NomeDoController
# Para visualizar o logs de um container/serviço
  a) docker logs laravel-10_db_1 -f
# Para parar todos os containers/serviços de uma só vez
  a) docker stop $(docker ps -a -q)
# Para executar no browser:
  a) http://localhost:8989 (Este é o conteúdo da variáveld e ambiente: APP_URL=http://localhost:8989 no arquivo .env)
  b) http://localhost:8989/supports


# Para ver e escolheer as várias versões do php ou java
  sudo update-alternatives --config php
  sudo update-alternatives --config java

# Para rodar a aplicação
  docker ps -a
  docker-compose up -d
  docker exec -it laravel-10_app_1 bash (Entrar no bash da aplicação para executar comandos artisan baseado no Php 8.1)
  


# Para conectar ao serviço do mysql rodando via docker (O container/serviço, já deve está "levantado via: docker-compose up -d)
  1 - docker exec -it <mysql container name> /bin/bash
  2 - Dentro do container, para conectar ao mysql digite a linha de comando:
      a) mysql -u root -p
      b) digite a senha especificada para o usuário root especificado no arquivo .env do laravel, neste caso a senha é "root"
  3 - Saiba quais bancos de dados estão atualmente criados na sua base
      a) mysql> show databases;
      b) mysql> use nome_do_banco (seleciona o banco para uso)
      c) mysql> show tables (mostra as tabelas do banco em uso)
  4 - Para apagar um banco de dados
      a) mysql> drop database <nome_do_banco>;
  5 - Para mostrar a listagem dos hosts e seus respectivos usuários
      a) mysql> select host, user from mysql.user;


# Para reexecutar uma migration, deve-se está dentro do "bash" do container da aplicação, como descrito abaixo:
  1 - marcio@marcio72:~/projetosdocker/laravel-10$ docker-compose exec app bash
  2 - yourusername@d6041e83f429:/var/www$ php artisan migrate:fresh

# Ao criar um helper e alterar o arquivo composer.json, execute o comando composer dump-autoload no bash da aplicação
  1 - marcio@marcio72:~/projetosdocker/laravel-10$ docker-compose exec app bash
  2 - yourusername@329e85e8dbe9:/var/www$ composer dump-autoload


# Site Projeto Completo
  https://github.com/especializati/curso-de-laravel-10


  token atual:
  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


# (?) Learn how to resolve a blocked push https://docs.github.com/code-security/secret-scanning/pushing-a-branch-blocked-by-push-protection


# Para corrigir: GITHUB PUSH PROTECTION
1 - Click no link indicado na mesagem de erro como abaixo
    ...
    (?) To push, remove secret from commit(s) or follow this URL to allow the secret.
    remote:        https://github.com/marcio72vieira/laravel-10/security/secret-scanning/unblock-secret/2i9cNDezVKANbKbEw9heflhP1KV
    ...
2 - Na caixa de mensagem que abrir, clique na opção: "falso positivo"


# Criando a Api da aplicação
  1 - marcio@marcio72:~/projetosdocker/laravel-10$ docker-compose exec app bash
  2 - yourusername@d6041e83f429:/var/www$ php artisan make:controller Api\\SupportController --api


#token do dia
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


Site de instalação do node, npm e nvm
https://monovm.com/blog/install-npm-on-ubuntu/#Install-Node.js-and-npm-from-the-Ubuntu
https://github.com/nvm-sh/nvm?tab=readme-ov-file#install--update-script

####################################
# Criando a autenticação com breeeze
#####################################
0 - A partir daqui, sempre que for executar a aplicação no browse digitar:
    nvm ls
    nvm use 22.4
    npm run dev

1 - composer require laravel/breeze --dev

2 - Navegue para a página:  https://github.com/laravel/laravel/
3 - Escolha o forque 10.x
4 - Copie o conteúdo do arquivo package.json do site e substitua pelo conteúdo do arquivo package.json local
5 - Faça uma cópia do arquivo routes/web.php para web_original.php

5 - php artisan breeze:install
    Escolher:
      stack: 0(blade)
      mode dark: y(sim)
      test prefer Pest: (no - PhpUnit, default)

      Serão Criados:
        Irá criar a pasta Http/Controllers/Auth, com todos os controladores da autenticação
        Irá criar a pasta Http/Requests/Auth, com todos as requests de validação para autenticação
        Irá criar o arquivo na pasta Http/Controllers/ProfileController.php com todos os métodos para o perfil da autenticação
        Irá criar as views de autenticação na pasta resource/views/auth
        Irá criar as views de profiele na pasta resource/views/ProfileController
        Irá acrescentar todos os componentes criados para autenticação na pasta resources/views/componentes
        Irá criar a pasta resources/views/layouts para as views de autenticação (app, guest e navigations)
        Irá criar a pasta resources/views/profile para as views de profile (app, guest e navigations)
        Irá criar o arquivo resources/views/dashboard.blade.php para o dashboard da aplicação
        Irá colocar um link de "register" e "login" na view de welcome.blade.php (view inicial da aplicação)
        Irá acrescentar o arquivo auth.php na pasta routes, onde irá conter todas as todas criadas para autenticação


6 - Acrescente o conteúdo das rotas do arquivo routes/web_original.php ao arquivo routes/web.php, dentro do grupo:
    Route::middleware('auth')->group(function () { 
      ...
      rotas angigas aqui!
    }

    

7 - Digite npm install para instalar todas as dependencia do arquivo package.json

8 - Digite npm install

9 - Digite npm run dev

###########################################
# Autenticando Usuários na API com Sanctum
###########################################
1 - Entrar no bash do container da aplicação a partir da máquina host:
    marcio@vaio:~/projetosdocker/laravel-10$ docker exec -it laravel-10_app_1 bash

2 - Instalar o Sanctum a partir do container:
    yourusername@ccbd68b97376:/var/www$ composer require laravel/sanctum

3 - Publicar, criar o arquivo sanctum.php na pasta /config a partir de sua publicação:
    yourusername@ccbd68b97376:/var/www$ php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider"

4 - Rodar a migration fornecida pelo Sanctum (A partir do Laravel 10, essa migration é padrão no Laravel):
    yourusername@ccbd68b97376:/var/www$ php artisan migrate

5 - Acrescentar a trait abaixo em app/Models/User.php, como abaixo:
    use Laravel\Sanctum\HasApiTokens;

    class User extends Authenticatable
    {
      use HasApiTokens, HasFactory, Notifiable;
    
6 - Pegar um usuário autenticado e criar um token de acesso, seguindo os passos:
    a)  Criar a rota, dentro de: routes/api.php
        Route::post('/login', [AuthApiController::class, 'login']);

    b)  Criar o controle dentro de app/Http/Controllers/Api/Auth
        yourusername@ccbd68b97376:/var/www$ php artisan make:controller Api/Auth/AuthApiController

    c)  importar o novo controller criado (AuthApiController), no arquivo de rotas da api (routes/api.php)
        use App\Http\Controllers\Api\Auth\AuthApiController;

    d)  Criar o método "login" no controller AuthApiController
        d.1 - Importar: 
              use App\Models\User;
              use Illuminate\Support\Facades\Hash;
              use Illuminate\Validation\ValidationException;

        
        d.2 - public funcion login (Request $request) {
                $credential = $request->only(['email', 'password', 'device_name']);

                $user = User::where('email', $request->email)->first();

                // Hash::check($request->password, $user->password)

                // Se não encontrou o usuário ou a senha está incorreta, lança uma exception.
                if(!user || !Hash::check($request->password, $user->password)){
                  throw ValidationException::withMessages([
                    'email' => 'The credentials are incorrects'
                  ]);
                }

                // Implementando um login único, deletando todos os tokens do usuário armazenado no banco.
                // Deslogando o usuário de todos os outros dispositivos que o usuário estiver logado.
                // Logout others devices
                // if ($request->has('logout_others_devices)){$user->tokens()->delete();}
                
                $user->tokens()->delete();

                // Se encontrou o usuário, cria um token para o mesmo, com o método createToken, extraido da trait(HasApiTokens) utilizada no model User
                $token = $user->createToken($request->device_name)->plainTextToken;

                return response()->json([
                  'token' => $token
                ]);


        }

7 - Operando no insomnia para Obter o Token
    a)  Criar um nova pasta com o nome EspecializaTI
        a.1 - Criar nova request com o nome "obter post" do tipo POST 
        a.2 - Definir a URL da requisição: http://localhost:8989/api/login
    
    c)  Na aba "Body" Escolher Text: JSON
    
    d)  No corpo da aba JSON colocar os objetos (usuários cadastrados) abaixo:
        {
          "email": "ester@email.com",
          "password": "12345678",
          "device_name": "Insomnia"
        }

        OU

        {
          "email": "marcio72vieira@gmail.com",
          "password": "87654321",
          "device_name": "Insomnia"
        }
    
    
    d)  Na aba "Headers" Definir:
          Content-Type: application/json
          Accept: application/json
    
    e)  Clicar no botão lilas "Send"

    f)  Obterá como resposta, consideerando que é um usuário cadastrado:
        {
          "token": "1|1MDjCKaEi5Fa2ao7fmoHzUFdxQ55Dt533Jhu2e2Eaf01845a"
        }
    
    g)  Obterá como resposta, considerando que é um usuário não cadastrado:
        {
          "message": "The credentials are incorrects",
          "errors": {
            "email": [
              "The credentials are incorrects"
            ]
          }
        }

8 - Aplicar em route/api.php o middleware para as rotas que se deseja está autenticado com o token fornecido,
    ou seja, acessar recurso na API que requer autenticação.
    a)  Forma 01 - Grupos de rotas
        Route::middleware(['auth:sanctum'])->group(function(){
            Route::apiResource('/supports', SupportController::class);
        });
    
    b)  Forma 02 - Rotas específicas
        Route::apiResource('/supports', SupportController::class);->middleware('auth');
    
9 - Operando no Insomnia para obter recursos, após a alteração das rotas em: route/api.php
    a)  Faça uma cópia da requisição anterior "obter token" e modifique o verbo de POST para GET 
        modifique a URL para: http://localhost:8989/api/supports
    b)  Retire qualquer conteúdo do Body da requisição, ou seja, deixe-a limpa
    c)  Acrescente além dos headers (Content-Type e Accept) o header: 
        Authorization: Bearer 3|z1UxmUldNsMv0FRpfGWn452QHnBmn82Eb8dBNhsFfb7e6e2c 
    d)  Click no botão lilás "Send"
    e)  Será retornado o lista de registros cadastrados no banco
    f)  Para obter o registro de índice "2", altere a URL para: http://localhost:8989/api/supports/2
        Obs: Altere alguma letra no "token" gerado, irá retornar
              {
                "message": "Unauthenticated."
              }

10 -  Validando as informaçoes fornecidas para o login no AuthApiController
      a)  Criar a request AuthRequest com:
          yourusername@ccbd68b97376:/var/www$ php artisan make:request Api/AuthRequest
      
      b)  Alterar os métodos conforme definido abaixo:
          public function authorize(): bool
          {
              return true;
          }
    
          public function rules(): array
          {
              return [
                  'email' => ['required', 'email', 'max:255'],
                  'password' => ['required','max:255'],
                  'device_name' => ['required','max:255']
              ];
          }
  
      c)  Injetar a request AuthRequest no método login do controller AuthApiController como abaixo:
          use App\Http\Requests\Api\AuthRequest;

          public function login (AuthRequest $request) {
            ...
          }

11 -  Criando o "logout" para revogar um token específico. O usuário deverá está logado para realizar o logout
      a)  Criar a rota em routes/api.php
          Route::post('/logout', [AuthApiController::class, 'logout'])->middleware('auth:sanctum');
      
      b)  Criar o método loguot no controller AuthApiController, conforme abaixo:
          public function logout(Request $request)
          {
            // Delete todos os tokens do usuário autenticado
            $request->user()->tokens()->delete();

            // Retorna uma mensagem
            return response()->json([
              'message' => 'Logout successfully!'
            ]);
          }
      
      c)  Criar método para retornar o usuário authenticado
          // Retorna o usuário authenticado
          public function me(Request $request)
          {
            $user = $request->user();

            // Retorna o usuário authenticado
            return response()->json([
              'me' => $user
            ]);
          }
      
      d)  Acrescentar a nova rota para obter o usuário authenticado em routes/api.php. Nesse caso, será passado o middleware inline
          Route::get('/me', [AuthApiController::class, 'me'])->middleware('auth:sanctum');

12 -  No Insomnia, para as rotas de logout e me, deve-se sempre alterar o token obtido no header: Authorization Bearer conforme o token obtido




    



    

    
        






=======================================================================================================
Executando os comandos dentro do container em execução laravel-10_app_1, pois o PHP do container é 8.1
diferente da minha máquina local, que é 7.4 pois só os comandos abaixo, não iriam funcionar devido a 
incompatibilidade de versões do php já que o arquivo package.json foi modigicado nos passos anteriores
=======================================================================================================
docker exec -it laravel-10_app_1 php artisan
docker exec -it ccbd68b97376 php artisan

docker exec -it laravel-10_app_1 composer require laravel/breeze --dev
docker exec -it ccbd68b97376 composer require laravel/breeze --dev

docker exec -it laravel-10_app_1 php artisan breeze:install
docker exec -it ccbd68b97376 php artisan breeze:install

Na minha máquina local, trocar a versão do node com os comandos:
nvm ls (Listando as versões do node em minha máquina através do nvm)
nvm use 22.4 (Colocando em uso o node versão 22.4 ao invés da versão 14.4, que é a padrão na minha máquina)
npm install
npm run dev

Credenciais mailtrap:
MAIL_MAILER=smtp
MAIL_HOST=sandbox.smtp.mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=c9b77ce14d9056
MAIL_PASSWORD=***********1e8d (No MailTrap, coloque o mouse em cima do campo Passwword para "click to copy" e obter a senha que está truncada com *****)
MAIL_FROM_ADDRESS="contato@especializati.com.br"
MAIL_FROM_NAME="${APP_NAME}"

Depois de configurar as credenciais de E-mail, executar:
marcio@vaio:~$ docker exec -it laravel-10_app_1 bash (para entrar no bash do container)
yourusername@ccbd68b97376:/var/www$ composer dump-autoload (para otimizar a aplicação,já que foi alterado o arquivo .env)































