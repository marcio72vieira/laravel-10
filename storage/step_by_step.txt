# Para executar a aplicação:
  a) docker-compose up -d (Levanta todos os containers/serviços localizados dentro do arquivo: docker-compose.yml)
# Para executar o bash (pasta /var/www):
  a) docker exec -it laravel-10_app_1 bash
  a) docker-compose exec app bash
# Para sair do bash (pasta /var/www):
  a) exit
# Para ver os containers em execução: docker ps
# Para parar um container em execução: docker stop nome_do_contaier (se possuir) OU docker stop id_do_container
# Para executar um comando do artisan: Dentro do bash, executar o comando desejado: php artisan migrate OU php artisan make:controller NomeDoController
# Para visualizar o logs de um container/serviço
  a) docker logs laravel-10_db_1 -f
# Para parar todos os containers/serviços de uma só vez
  a) docker stop $(docker ps -a -q)
# Para executar no browser:
  a) http://localhost:8989 (Este é o conteúdo da variáveld e ambiente: APP_URL=http://localhost:8989 no arquivo .env)
  b) http://localhost:8989/supports


# Para ver e escolheer as várias versões do php ou java
  sudo update-alternatives --config php
  sudo update-alternatives --config java
  


# Para conectar ao serviço do mysql rodando via docker (O container/serviço, já deve está "levantado via: docker-compose up -d)
  1 - docker exec -it <mysql container name> /bin/bash
  2 - Dentro do container, para conectar ao mysql digite a linha de comando:
      a) mysql -u root -p
      b) digite a senha especificada para o usuário root especificado no arquivo .env do laravel, neste caso a senha é "root"
  3 - Saiba quais bancos de dados estão atualmente criados na sua base
      a) mysql> show databases;
      b) mysql> use nome_do_banco (seleciona o banco para uso)
      c) mysql> show tables (mostra as tabelas do banco em uso)
  4 - Para apagar um banco de dados
      a) mysql> drop database <nome_do_banco>;
  5 - Para mostrar a listagem dos hosts e seus respectivos usuários
      a) mysql> select host, user from mysql.user;


# Para reexecutar uma migration, deve-se está dentro do "bash" do container da aplicação, como descrito abaixo:
  1 - marcio@marcio72:~/projetosdocker/laravel-10$ docker-compose exec app bash
  2 - yourusername@d6041e83f429:/var/www$ php artisan migrate:fresh

# Ao criar um helper e alterar o arquivo composer.json, execute o comando composer dump-autoload no bash da aplicação
  1 - marcio@marcio72:~/projetosdocker/laravel-10$ docker-compose exec app bash
  2 - yourusername@329e85e8dbe9:/var/www$ composer dump-autoload


# Site Projeto Completo
  https://github.com/especializati/curso-de-laravel-10


  token atual:
  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


# (?) Learn how to resolve a blocked push https://docs.github.com/code-security/secret-scanning/pushing-a-branch-blocked-by-push-protection


# Para corrigir: GITHUB PUSH PROTECTION
1 - Click no link indicado na mesagem de erro como abaixo
    ...
    (?) To push, remove secret from commit(s) or follow this URL to allow the secret.
    remote:        https://github.com/marcio72vieira/laravel-10/security/secret-scanning/unblock-secret/2i9cNDezVKANbKbEw9heflhP1KV
    ...
2 - Na caixa de mensagem que abrir, clique na opção: "falso positivo"


# Criando a Api da aplicação
  1 - marcio@marcio72:~/projetosdocker/laravel-10$ docker-compose exec app bash
  2 - yourusername@d6041e83f429:/var/www$ php artisan make:controller Api\\SupportController --api


#token do dia
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

Site de instalação do node, npm e nvm
https://monovm.com/blog/install-npm-on-ubuntu/#Install-Node.js-and-npm-from-the-Ubuntu
https://github.com/nvm-sh/nvm?tab=readme-ov-file#install--update-script

# Criando a autenticação com breeeze
1 - composer require laravel/breeze --dev

2 - Navegue para a página:  https://github.com/laravel/laravel/
3 - Escolha o forque 10.x
4 - Copie o conteúdo do arquivo package.json do site e substitua pelo conteúdo do arquivo package.json local
5 - Faça uma cópia do arquivo routes/web.php para web_original.php

5 - php artisan breeze:install
    Escolher:
      stack: 0(blade)
      mode dark: y(sim)
      test prefer Pest: (no - PhpUnit, default)

      Serão Criados:
        Irá criar a pasta Http/Controllers/Auth, com todos os controladores da autenticação
        Irá criar a pasta Http/Requests/Auth, com todos as requests de validação para autenticação
        Irá criar o arquivo na pasta Http/Controllers/ProfileController.php com todos os métodos para o perfil da autenticação
        Irá criar as views de autenticação na pasta resource/views/auth
        Irá criar as views de profiele na pasta resource/views/ProfileController
        Irá acrescentar todos os componentes criados para autenticação na pasta resources/views/componentes
        Irá criar a pasta resources/views/layouts para as views de autenticação (app, guest e navigations)
        Irá criar a pasta resources/views/profile para as views de profile (app, guest e navigations)
        Irá criar o arquivo resources/views/dashboard.blade.php para o dashboard da aplicação
        Irá colocar um link de "register" e "login" na view de welcome.blade.php (view inicial da aplicação)
        Irá acrescentar o arquivo auth.php na pasta routes, onde irá conter todas as todas criadas para autenticação


6 - Acrescente o conteúdo das rotas do arquivo routes/web_original.php ao arquivo routes/web.php, dentro do grupo:
    Route::middleware('auth')->group(function () { 
      ...
      rotas angigas aqui!
    }

    

7 - Digite npm install para instalar todas as dependencia do arquivo package.json

8 - Digite npm install

9 - Digite npm run dev




=======================================================================================================
Executando os comandos dentro do container em execução laravel-10_app_1, pois o PHP do container é 8.1
diferente da minha máquina local, que é 7.4 pois só os comandos abaixo, não iriam funcionar devido a 
incompatibilidade de versões do php já que o arquivo package.json foi modigicado nos passos anteriores
=======================================================================================================
docker exec -it laravel-10_app_1 php artisan
docker exec -it ccbd68b97376 php artisan

docker exec -it laravel-10_app_1 composer require laravel/breeze --dev
docker exec -it ccbd68b97376 composer require laravel/breeze --dev

docker exec -it laravel-10_app_1 php artisan breeze:install
docker exec -it ccbd68b97376 php artisan breeze:install

Na minha máquina local, trocar a versão do node com os comandos:
nvm ls (Listando as versões do node em minha máquina através do nvm)
nvm use 22.4 (Colocando em uso o node versão 22.4 ao invés da versão 14.4, que é a padrão na minha máquina)
npm install
npm run dev

Credenciais mailtrap:
MAIL_MAILER=smtp
MAIL_HOST=sandbox.smtp.mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=c9b77ce14d9056
MAIL_PASSWORD=***********1e8d (No MailTrap, coloque o mouse em cima do campo Passwword para "click to copy" e obter a senha que está truncada com *****)
MAIL_FROM_ADDRESS="contato@especializati.com.br"
MAIL_FROM_NAME="${APP_NAME}"

Depois de configurar as credenciais de E-mail, executar:
marcio@vaio:~$ docker exec -it laravel-10_app_1 bash (para entrar no bash do container)
yourusername@ccbd68b97376:/var/www$ composer dump-autoload (para otimizar a aplicação,já que foi alterado o arquivo .env)































